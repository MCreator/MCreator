import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "java"
    id "idea"
    id "de.undercouch.download" version "5.6.0"
    id 'edu.sc.seis.launch4j' version '3.0.5'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    maven { url "https://repo.gradle.org/gradle/libs-releases" } // for gradle-tooling-api
    flatDir { dirs 'lib' }
}

project.ext.mcreatorconf = new Properties()
file('src/main/resources/mcreator.conf').withInputStream { project.mcreatorconf.load(it) }

group = 'net.mcreator'
version = project.mcreatorconf.getProperty('mcreator')
project.ext.builddate = project.hasProperty('builddate') ? project.getProperty('builddate') : new Date().format('wwuHH')
project.ext.snapshot = project.hasProperty('snapshot') ? Boolean.parseBoolean((String) project.getProperty('snapshot')) : false

javadoc.source = sourceSets.main.allJava
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

idea {
    module {
        inheritOutputDirs = true

        // define exclude dirs
        excludeDirs += file(".gradle")
        excludeDirs += file(".idea")
        excludeDirs += file("build")
        excludeDirs += file("gradle")
        excludeDirs += file("jdk")
        excludeDirs += file("license")
        excludeDirs += file("logs")

        // additional source dirs
        sourceDirs += file("plugins/mcreator-core/blockly/js")
    }
}

configurations {
    testImplementation.extendsFrom compileOnly

    provided
    compileOnly.extendsFrom provided
    runtimeOnly.extendsFrom provided

    export.extendsFrom implementation
    export.canBeResolved = true

    win64
    macX64
    macAarch64
    linux64

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        runtimeOnly.extendsFrom win64
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        if (System.getProperty("os.arch").contains("aarch64")) {
            runtimeOnly.extendsFrom macAarch64
        } else {
            runtimeOnly.extendsFrom macX64
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        runtimeOnly.extendsFrom linux64
    }
}

configurations.win64.attributes {
    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.WINDOWS))
    attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, MachineArchitecture.X86_64))
}

configurations.macX64.attributes {
    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.MACOS))
    attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, MachineArchitecture.X86_64))
}

configurations.macAarch64.attributes {
    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.MACOS))
    attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, MachineArchitecture.ARM64))
}

configurations.linux64.attributes {
    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.LINUX))
    attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, MachineArchitecture.X86_64))
}

dependencies {
    // from lib folder
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    // from maven
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.32'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'com.github.sps.junidecode', name: 'junidecode', version: '0.3'
    implementation group: 'org.jboss.forge.roaster', name: 'roaster-api', version: '2.29.0.Final'
    implementation group: 'org.jboss.forge.roaster', name: 'roaster-jdt', version: '2.29.0.Final'
    implementation group: 'org.snakeyaml', name: 'snakeyaml-engine', version: '2.7'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    implementation group: 'com.google.guava', name: 'guava', version: '33.1.0-jre'
    implementation group: 'de.javagl', name: 'obj', version: '0.4.0'
    implementation group: 'com.univocity', name: 'univocity-parsers', version: '2.9.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.23.1'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.11.0'
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.12'
    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '8.6'
    implementation group: 'net.java.balloontip', name: 'balloontip', version: '1.2.4.1'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.17.0'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark-ext-autolink', version: '0.17.0'
    implementation group: 'com.atlassian.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.17.0'
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.4.0'
    implementation group: 'com.fifesoft', name: 'autocomplete', version: '3.3.1'
    implementation(group: 'com.fifesoft', name: 'languagesupport', version: '3.3.0') {
        dep -> dep.exclude group: 'org.mozilla', module: 'rhino'
    }
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.14.0' // needed by discord-rpc.jar

    implementation group: 'com.github.weisj', name: 'jsvg', version: '1.4.0'
    implementation group: 'com.formdev', name: 'flatlaf', version: '3.4', classifier: 'no-natives'
    implementation(group: 'com.formdev', name: 'flatlaf-extras', version: '3.4') {
        dep -> exclude group: 'com.formdev', module: 'flatlaf'
    }
    win64 group: 'com.formdev', name: 'flatlaf', version: '3.4', classifier: 'windows-x86_64', ext: 'dll'
    macX64 group: 'com.formdev', name: 'flatlaf', version: '3.4', classifier: 'macos-x86_64', ext: 'dylib'
    macAarch64 group: 'com.formdev', name: 'flatlaf', version: '3.4', classifier: 'macos-arm64', ext: 'dylib'
    linux64 group: 'com.formdev', name: 'flatlaf', version: '3.4', classifier: 'linux-x86_64', ext: 'so'

    // test dependencies
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.2'
}

javafx {
    version = '21.0.2'
    modules = ['javafx.web', 'javafx.swing']
    configurations = ['provided', 'win64', 'macX64', 'macAarch64', 'linux64']
    // we provide natives during deployment or with SDK
}

test {
    useJUnitPlatform()

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    // default max heap is VM RAM / 4, which may be too low on low RAM VMs
    maxHeapSize = "2048m"

    testLogging {
        // https://stackoverflow.com/a/48709645/1627085
        events "passed", "skipped", "failed"
        showStandardStreams = true

        showCauses true
        showStackTraces true
        showExceptions true
        exceptionFormat "full"

        debug {
            events "started", "failed", "passed", "skipped", "standard_error", "standard_out"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.runtimeClasspath

    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.register('runMCreator', JavaExec.class) {
    dependsOn jar

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath += sourceSets.main.runtimeClasspath

    mainClass.set("net.mcreator.Launcher")
}

apply from: 'platform/setup.gradle'
apply from: 'platform/export.gradle'
