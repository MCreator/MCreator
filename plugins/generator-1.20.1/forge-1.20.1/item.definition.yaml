templates:
  - template: item/item.java.ftl
    name: "@SRCROOT/@BASEPACKAGEPATH/item/@NAMEItem.java"
  - template: item/item_container.java.ftl
    name: "@SRCROOT/@BASEPACKAGEPATH/item/inventory/@NAMEInventoryCapability.java"
    condition: hasInventory()
  - template: json/item.json.ftl
    writer: json
    condition:
      - "renderType #= 0"
      - "hasNormalModel()"
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/tool.json.ftl
    writer: json
    condition:
      - "renderType #= 0"
      - "hasToolModel()"
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/item_cmodel.json.ftl
    writer: json
    condition: "renderType #= 1"
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/item_cmodel_obj.json.ftl
    writer: json
    condition: "renderType #= 2"
    name: "@MODASSETSROOT/models/item/@registryname.json"

list_templates:
  - name: "Item states"
    listData: data.getModels()
    forEach:
      - template: json/item.json.ftl
        writer: json
        condition:
          - "renderType #= 0"
          - "hasNormalModel()"
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/tool.json.ftl
        writer: json
        condition:
          - "renderType #= 0"
          - "hasToolModel()"
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/item_cmodel.json.ftl
        writer: json
        condition: "renderType #= 1"
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/item_cmodel_obj.json.ftl
        writer: json
        condition: "renderType #= 2"
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"

localizationkeys:
  - key: item.@modid.@registryname
    mapto: name