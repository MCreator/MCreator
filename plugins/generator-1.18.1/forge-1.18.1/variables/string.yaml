defaultvalue: '""'
scopes:
  local:
    init: ${var.getType().getJavaType(generator.getWorkspace())} ${var.getName()} = ${var.getType().getDefaultValue(generator.getWorkspace())};
    get: ${name}
    set: ${name} = ${opt.removeParentheses(value)};
  global_session:
    init: public static String ${var.getName()} = "${JavaConventions.escapeStringForJava(var.getValue())}";
    get: ${JavaModName}Variables.${name}
    set: ${JavaModName}Variables.${name} = ${opt.removeParentheses(value)};
  global_world:
    init: public String ${var.getName()} = "${JavaConventions.escapeStringForJava(var.getValue())}";
    read: ${var.getName()} = nbt.getString("${var.getName()}");
    write: nbt.putString("${var.getName()}" , ${var.getName()});
    get: ${JavaModName}Variables.WorldVariables.get(world).${name}
    set: |
      ${JavaModName}Variables.WorldVariables.get(world).${name} = ${opt.removeParentheses(value)};
      ${JavaModName}Variables.WorldVariables.get(world).syncData(world);
  global_map:
    init: public String ${var.getName()} = "${JavaConventions.escapeStringForJava(var.getValue())}";
    read: ${var.getName()} = nbt.getString("${var.getName()}");
    write: nbt.putString("${var.getName()}" , ${var.getName()});
    get: ${JavaModName}Variables.MapVariables.get(world).${name}
    set: |
      ${JavaModName}Variables.MapVariables.get(world).${name} = ${opt.removeParentheses(value)};
      ${JavaModName}Variables.MapVariables.get(world).syncData(world);
  player_lifetime:
    init: public String ${var.getName()} = "${JavaConventions.escapeStringForJava(var.getValue())}";
    read: ${var.getName()} = nbt.getString("${var.getName()}");
    write: nbt.putString("${var.getName()}" , ${var.getName()});
    get: |
      ((${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null)
        .orElse(new ${JavaModName}Variables.PlayerVariables())).${name})
    set: |
      {
        String _setval = ${opt.removeParentheses(value)};
        ${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null).ifPresent(capability -> {
          capability.${name} = _setval;
          capability.syncPlayerVariables(${entity});
        });
      }
  player_persistent:
    init: public String ${var.getName()} = "${JavaConventions.escapeStringForJava(var.getValue())}";
    read: ${var.getName()} = nbt.getString("${var.getName()}");
    write: nbt.putString("${var.getName()}" , ${var.getName()});
    get: |
      ((${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null)
        .orElse(new ${JavaModName}Variables.PlayerVariables())).${name})
    set: |
      {
        String _setval = ${opt.removeParentheses(value)};
        ${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null).ifPresent(capability -> {
          capability.${name} = _setval;
          capability.syncPlayerVariables(${entity});
        });
      }
