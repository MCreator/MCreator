defaultvalue: Blocks.AIR.defaultBlockState()
scopes:
  local:
    init: ${var.getType().getJavaType(generator.getWorkspace())} ${var.getName()} = ${var.getType().getDefaultValue(generator.getWorkspace())};
    get: /*@BlockState*/${name}
    set: <#include "mcitems.ftl"> ${name} = ${mappedBlockToBlockStateCode(value)};
  global_session:
    init: public static BlockState ${var.getName()} = ${generator.map(var.getValue(), "blocksitems")}.defaultBlockState();
    get: /*@BlockState*/${JavaModName}Variables.${name}
    set: <#include "mcitems.ftl"> ${JavaModName}Variables.${name} = ${mappedBlockToBlockStateCode(value)};
  global_world:
    init: public BlockState ${var.getName()} = ${generator.map(var.getValue(), "blocksitems")}.defaultBlockState();
    read: ${var.getName()} = NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), nbt.getCompound("${var.getName()}"));
    write: nbt.put("${var.getName()}", NbtUtils.writeBlockState(${var.getName()}));
    get: /*@BlockState*/${JavaModName}Variables.WorldVariables.get(world).${name}
    set: |
      <#include "mcitems.ftl">
      ${JavaModName}Variables.WorldVariables.get(world).${name} = ${mappedBlockToBlockStateCode(value)};
      ${JavaModName}Variables.WorldVariables.get(world).syncData(world);
  global_map:
    init: public BlockState ${var.getName()} = ${generator.map(var.getValue(), "blocksitems")}.defaultBlockState();
    read: ${var.getName()} = NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), nbt.getCompound("${var.getName()}"));
    write: nbt.put("${var.getName()}", NbtUtils.writeBlockState(${var.getName()}));
    get: /*@BlockState*/${JavaModName}Variables.MapVariables.get(world).${name}
    set: |
      <#include "mcitems.ftl">
      ${JavaModName}Variables.MapVariables.get(world).${name} = ${mappedBlockToBlockStateCode(value)};
      ${JavaModName}Variables.MapVariables.get(world).syncData(world);
  player_lifetime:
    init: public BlockState ${var.getName()} = ${generator.map(var.getValue(), "blocksitems")}.defaultBlockState();
    read: ${var.getName()} = NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), nbt.getCompound("${var.getName()}"));
    write: nbt.put("${var.getName()}", NbtUtils.writeBlockState(${var.getName()}));
    get: |
      /*@BlockState*/((${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null)
        .orElse(new ${JavaModName}Variables.PlayerVariables())).${name})
    set: |
      <#include "mcitems.ftl">
      {
        BlockState _setval = ${mappedBlockToBlockStateCode(value)};
        ${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null).ifPresent(capability -> {
          capability.${name} = _setval;
          capability.syncPlayerVariables(${entity});
        });
      }
  player_persistent:
    init: public BlockState ${var.getName()} = ${generator.map(var.getValue(), "blocksitems")}.defaultBlockState();
    read: ${var.getName()} = NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), nbt.getCompound("${var.getName()}"));
    write: nbt.put("${var.getName()}", NbtUtils.writeBlockState(${var.getName()}));
    get: |
      /*@BlockState*/((${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null)
        .orElse(new ${JavaModName}Variables.PlayerVariables())).${name})
    set: |
      <#include "mcitems.ftl">
      {
        BlockState _setval = ${mappedBlockToBlockStateCode(value)};
        ${entity}.getCapability(${JavaModName}Variables.PLAYER_VARIABLES_CAPABILITY, null).ifPresent(capability -> {
          capability.${name} = _setval;
          capability.syncPlayerVariables(${entity});
        });
      }
