<#-- @formatter:off -->
/*
 *    MCreator note:
 *
 *    This file is autogenerated to connect all MCreator mod elements together.
 *
 */

package ${package};

public class Elements${JavaModName} implements IFuelHandler, IWorldGenerator {

	public final List<ModElement> elements = new ArrayList<>();

	public final List<Supplier<Block>> blocks = new ArrayList<>();
	public final List<Supplier<Item>> items = new ArrayList<>();
	public final List<Supplier<Biome>> biomes = new ArrayList<>();
	public final List<Supplier<EntityEntry>> entities = new ArrayList<>();
	public final List<Supplier<Potion>> potions = new ArrayList<>();

	public static Map<ResourceLocation, net.minecraft.util.SoundEvent> sounds = new HashMap<>();

	public Elements${JavaModName}() {
		<#list sounds as sound>
		sounds.put(new ResourceLocation("${modid}" ,"${sound}"), new net.minecraft.util.SoundEvent(new ResourceLocation("${modid}" ,"${sound}")));
		</#list>
	}

	public void preInit(FMLPreInitializationEvent event) {
		try {
			for (ASMDataTable.ASMData asmData : event.getAsmData().getAll(ModElement.Tag.class.getName())) {
				Class<?> clazz = Class.forName(asmData.getClassName());
				if(clazz.getSuperclass() == Elements${JavaModName}.ModElement.class)
						elements.add((Elements${JavaModName}.ModElement) clazz.getConstructor(this.getClass()).newInstance(this));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Collections.sort(elements);
		elements.forEach(Elements${JavaModName}.ModElement::initElements);

		this.addNetworkMessage(${JavaModName}Variables.WorldSavedDataSyncMessageHandler.class, ${JavaModName}Variables.WorldSavedDataSyncMessage.class, Side.SERVER, Side.CLIENT);
	}

	public void registerSounds(RegistryEvent.Register<net.minecraft.util.SoundEvent> event) {
		for (Map.Entry<ResourceLocation, net.minecraft.util.SoundEvent> sound : sounds.entrySet())
			event.getRegistry().register(sound.getValue().setRegistryName(sound.getKey()));
	}

	@Override public void generate(Random random, int chunkX, int chunkZ, World world, IChunkGenerator cg, IChunkProvider cp) {
		elements.forEach(element -> element.generateWorld(random, chunkX * 16, chunkZ * 16, world, world.provider.getDimension(), cg, cp));
	}

	@Override public int getBurnTime(ItemStack fuel) {
		for(ModElement element : elements) {
			int ret=element.addFuel(fuel);
			if(ret != 0)
				return ret;
		}
		return 0;
	}

	@SubscribeEvent public void onPlayerLoggedIn(net.minecraftforge.fml.common.gameevent.PlayerEvent.PlayerLoggedInEvent event) {
		if (!event.player.world.isRemote) {
			WorldSavedData mapdata = ${JavaModName}Variables.MapVariables.get(event.player.world);
			WorldSavedData worlddata = ${JavaModName}Variables.WorldVariables.get(event.player.world);
			if(mapdata != null)
				${JavaModName}.PACKET_HANDLER.sendTo(new ${JavaModName}Variables.WorldSavedDataSyncMessage(0, mapdata), (EntityPlayerMP) event.player);
			if(worlddata != null)
				${JavaModName}.PACKET_HANDLER.sendTo(new ${JavaModName}Variables.WorldSavedDataSyncMessage(1, worlddata), (EntityPlayerMP) event.player);
		}
    }

    @SubscribeEvent public void onPlayerChangedDimension(net.minecraftforge.fml.common.gameevent.PlayerEvent.PlayerChangedDimensionEvent event) {
		if (!event.player.world.isRemote) {
			WorldSavedData worlddata = ${JavaModName}Variables.WorldVariables.get(event.player.world);
			if(worlddata != null)
				${JavaModName}.PACKET_HANDLER.sendTo(new ${JavaModName}Variables.WorldSavedDataSyncMessage(1, worlddata), (EntityPlayerMP) event.player);
		}
    }

	private int messageID = 0;

	public <T extends IMessage, V extends IMessage> void addNetworkMessage(Class<? extends IMessageHandler<T, V>> handler, Class<T> messageClass, Side... sides) {
		for (Side side : sides)
			${JavaModName}.PACKET_HANDLER.registerMessage(handler, messageClass, messageID, side);
		messageID++;
	}

    public static class GuiHandler implements IGuiHandler {
		@Override public Object getServerGuiElement(int id, EntityPlayer player, World world, int x, int y, int z) {
    		<#list w.getElementsOfType("GUI") as mod>
				if (id == Gui${mod.getName()}.GUIID)
					return new Gui${mod.getName()}.GuiContainerMod(world, x, y, z, player);
			</#list>
			return null;
		}

		@Override public Object getClientGuiElement(int id, EntityPlayer player, World world, int x, int y, int z) {
    		<#list w.getElementsOfType("GUI") as mod>
				if (id == Gui${mod.getName()}.GUIID)
					return new Gui${mod.getName()}.GuiWindow(world, x, y, z, player);
			</#list>
			return null;
		}
	}

	public List<ModElement> getElements() {
		return elements;
	}

	public List<Supplier<Block>> getBlocks() {
		return blocks;
	}

	public List<Supplier<Item>> getItems() {
		return items;
	}

	public List<Supplier<Biome>> getBiomes() {
		return biomes;
	}

	public List<Supplier<EntityEntry>> getEntities() {
		return entities;
	}

	public List<Supplier<Potion>> getPotions() {
		return potions;
	}

	public static class ModElement implements Comparable<ModElement> {

		@Retention(RetentionPolicy.RUNTIME)
		public @interface Tag { }

		protected final Elements${JavaModName} elements;
		protected final int sortid;

		public ModElement(Elements${JavaModName} elements, int sortid) {
			this.elements = elements;
			this.sortid = sortid;
		}

		public void initElements() {
		}

		public void init(FMLInitializationEvent event) {
		}

		public void preInit(FMLPreInitializationEvent event) {
		}

		public void generateWorld(Random random, int posX, int posZ, World world, int dimID, IChunkGenerator cg, IChunkProvider cp) {
		}

		public void serverLoad(FMLServerStartingEvent event) {
		}

		public void registerModels(ModelRegistryEvent event) {
		}

		public int addFuel(ItemStack fuel) {
			return 0;
		}

		@Override public int compareTo(ModElement other){
        	return this.sortid - other.sortid;
    	}

	}

}
<#-- @formatter:on -->