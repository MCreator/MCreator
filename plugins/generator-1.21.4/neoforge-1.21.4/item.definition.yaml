templates:
  - template: item/item.java.ftl
    name: "@SRCROOT/@BASEPACKAGEPATH/item/@NAMEItem.java"
  - template: item/item_container.java.ftl
    name: "@SRCROOT/@BASEPACKAGEPATH/item/inventory/@NAMEInventoryCapability.java"
    condition: hasInventory()
  - template: json/musicdisc.json.ftl
    writer: json
    name: "@MODDATAROOT/jukebox_song/@registryname.json"
    condition: isMusicDisc
  - template: json/banner_pattern_item_tag.json.ftl
    writer: json
    name: "@MODDATAROOT/tags/banner_pattern/pattern_item/@registryname.json"
    condition: hasBannerPatterns()
  - template: json/item.json.ftl
    writer: json
    condition: hasNormalModel()
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/tool.json.ftl
    writer: json
    condition: hasToolModel()
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/rangeditem.json.ftl
    writer: json
    condition: hasRangedItemModel()
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/item_cmodel.json.ftl
    writer: json
    condition: hasCustomJSONModel()
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/item_cmodel_obj.json.ftl
    writer: json
    condition: hasCustomOBJModel()
    name: "@MODASSETSROOT/models/item/@registryname.json"
  - template: json/item_gui.json.ftl
    writer: json
    condition: hasGUITexture()
    name: "@MODASSETSROOT/models/item/@registryname_gui.json"
  - template: json/model_item.json.ftl
    writer: json
    name: "@MODASSETSROOT/items/@registryname.json"

global_templates:
  - template: item/overrides_model.java.ftl
    name: "@SRCROOT/@BASEPACKAGEPATH/client/renderer/item/LegacyOverrideSelectItemModel.java"
    condition: "${w.getGElementsOfType('item')?filter(e -> e.getModels()?has_content)?size != 0}"

list_templates:
  - name: "Item states"
    listData: data.getModels()
    forEach:
      - template: json/item.json.ftl
        writer: json
        condition: hasNormalModel()
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/tool.json.ftl
        writer: json
        condition: hasToolModel()
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/rangeditem.json.ftl
        writer: json
        condition: hasRangedItemModel()
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/item_cmodel.json.ftl
        writer: json
        condition: hasCustomJSONModel()
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"
      - template: json/item_cmodel_obj.json.ftl
        writer: json
        condition: hasCustomOBJModel()
        name: "@MODASSETSROOT/models/item/@registryname_@itemindex.json"

tags:
  - tag: ITEMS:minecraft:meat
    condition: "${data.isFood && data.isMeat}"
  - tag: ITEMS:minecraft:enchantable/durability
    condition: ${data.damageCount != 0}
  - tag: ITEMS:minecraft:music_discs
    condition: isMusicDisc

localizationkeys:
  - key: item.@modid.@registryname
    mapto: name
  - key: item.@modid.@registryname.desc
    mapto: musicDiscDescription
    condition: isMusicDisc
  - fromlist: data.getFixedSpecialInformation()
    key: item.@modid.@registryname.description_@item_index