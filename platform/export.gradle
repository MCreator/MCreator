if (project.snapshot) {
    project.mcreatorconf.setProperty('mcreator', "EAP " + (String) project.mcreatorconf.getProperty('mcreator') + (String) project.builddate)
}

tasks.register('cleanupPlugins') {
    doFirst {
        delete 'build/plugins/'
    }
}

// export  all plugins
file('plugins').traverse([maxDepth: 0, type: groovy.io.FileType.DIRECTORIES]) {
    tasks.register('export_plugin_' + it.getName().replace('.', ''), Zip.class) { task ->
        task.archiveFileName = it.getName() + '.zip'
        task.destinationDirectory = file('build/plugins/')
        task.from 'plugins/' + it.getName()
        task.group "mcreatorplugins"
        task.mustRunAfter cleanupPlugins
    }
}

tasks.register('exportPlugins') {
    dependsOn tasks.matching { Task t -> t.name.startsWith("export_plugin_") }
    dependsOn cleanupPlugins
}

jar {
    doFirst {
        delete 'build/export/'
        mkdir 'build/export/'
    }

    archiveFileName = 'mcreator.jar'
    manifest {
        attributes(
                'Main-Class': 'net.mcreator.Launcher',
                'MCreator-Version': project.mcreatorconf.getProperty('mcreator'),
                'Build-Date': project.builddate,
                'Build-Is-Snapshot': project.snapshot
        )
    }
}

tasks.register('generateExportReport') {
    doLast {
        def report = ""

        def fg = new HashSet<String>()
        def bd = new HashSet<String>()
        def dp = new HashSet<String>()
        file('plugins').traverse([maxDepth: 1, type: groovy.io.FileType.DIRECTORIES]) {
            if(it.getPath().contains("mcreator-link"))
                return // do not include mcreator-link generator folders in version checks

            def fn = it.getName()
            if (fn.startsWith("addon-")) {
                bd.add(fn.substring(fn.lastIndexOf("-") + 1))
            } else if (fn.startsWith("datapack-")) {
                dp.add(fn.substring(fn.lastIndexOf("-") + 1))
            } else if (fn.startsWith("forge-")) {
                fg.add(fn.substring(fn.lastIndexOf("-") + 1))
            }
        }

        fg = new ArrayList<>(fg)
        bd = new ArrayList<>(bd)
        dp = new ArrayList<>(dp)

        fg.sort { a, b -> b <=> a }
        bd.sort { a, b -> b <=> a }
        dp.sort { a, b -> b <=> a }

        report += 'mcreator=' + version.toString() + '.' + project.builddate.toString() + '\n'
        report += 'version=' + (String) project.mcreatorconf.getProperty('mcreator').toString() + '\n'
        report += 'builddate=' + project.builddate.toString() + '\n'
        report += 'minecraft=Minecraft Forge ' + String.join("/", fg) + ', Data Packs ' + String.join("/", dp) + ', and Bedrock Edition ' + String.join("/", bd) + '\n'

        new File("build").mkdirs()
        new File("build/reports").mkdirs()
        file("build/reports/export.txt").write(report)
    }
}

tasks.register('exportAll') {
    group 'export'

    dependsOn exportWindows
    dependsOn exportMac
    dependsOn exportLinux
    dependsOn generateExportReport
}

apply from: 'platform/windows/windows.gradle'
apply from: 'platform/linux/linux.gradle'
apply from: 'platform/mac/mac.gradle'