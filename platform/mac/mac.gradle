import org.apache.tools.ant.taskdefs.condition.Os

def exportPath = 'build/export/mac64/MCreator.app/Contents/'

task exportMac64(type: Copy, dependsOn: [downloadJDKMac64, jar, exportPlugins]) {
    into exportPath
    into('') {
        from file('platform/mac/Info.plist') rename('Info.plist', 'Info.plistdos') filter { line ->
            line.replace('%mcreator%', (String) project.mcreatorconf.getProperty('mcreator'))
        }
        from file('LICENSE.txt')
    }
    into('Resources') {
        from file('platform/mac/mcreatorapp.icns')
        from file('platform/mac/mcreator.icns')
    }
    into('MacOS') {
        from file('platform/mac/mcreator')
        from file('LICENSE.txt')
    }
    into('MacOS/plugins') { from 'build/plugins/' }
    into('MacOS/license') { with copySpec { from 'license' } }
    into('MacOS/lib') {
        with copySpec {
            from 'build/libs'
            from configurations.export
            from configurations.mac64
        }
    }
    into('MacOS/jdk/') { with copySpec { from 'jdk/jdk16_mac_64/' } }
    doLast {
        convertCRLF(file(exportPath + '/Info.plistdos'), file(exportPath + '/Info.plist'))
        delete exportPath + '/Info.plistdos'
    }
}

task dmgMac64(dependsOn: [downloadMKISOFS, exportMac64]) {
    doLast {
        def mkisofs_binary
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            mkisofs_binary = projectDir.toString() + '/build/tools/mkisofs/Sample/mkisofs'
        } else { // we are on Nix system
            mkisofs_binary = 'mkisofs'

            // chmod needed on executable as mkisofs does not +x on Nix systems
            exec { commandLine('chmod', '+x', exportPath + '/MacOS/mcreator') }
        }
        ant.exec(executable: mkisofs_binary, failonerror: true) {
            arg(value: '-r')
            arg(value: '-D')
            arg(value: '-o')
            arg(value: 'build/export/MCreator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Mac 64bit.dmg')
            arg(value: '-mac-name')
            arg(value: '-V')
            arg(value: 'MCreator ' + (String) project.mcreatorconf.getProperty('mcreator'))
            arg(value: '-apple')
            arg(value: '-v')
            arg(value: new File(buildDir, 'export/mac64'))
        }
    }
}

static void convertCRLF(File input, File out) {
    out << input.text.replaceAll('\r\n', '\n')
}

task exportMac(type: DefaultTask, group: 'export') {
    dependsOn dmgMac64

    doLast {
        delete 'build/export/mac64'
    }
}
