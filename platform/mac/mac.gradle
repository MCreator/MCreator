import org.apache.tools.ant.taskdefs.condition.Os

static void convertCRLF(File input, File out) {
    out << input.text.replaceAll('\r\n', '\n')
}

// locate mkisofs
def mkisofs_binary = 'mkisofs'
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    mkisofs_binary = projectDir.toString() + '/build/tools/mkisofs/Sample/mkisofs'
}

tasks.register('exportMacX64', Copy.class) {
    dependsOn downloadJDKMacX64
    dependsOn downloadMKISOFS
    dependsOn jar
    dependsOn exportPlugins

    def exportPathX64 = 'build/export/mac_x64/MCreator.app'

    def appIcon = project.snapshot ? "mcreatorapp_eap.icns" : "mcreatorapp.icns"
    def icon = project.snapshot ? "mcreator_eap.icns" : "mcreator.icns"

    into(exportPathX64 + '/Contents/')
    into('') {
        from file('platform/mac/Info.plist') rename('Info.plist', 'Info.plistdos') filter { line ->
            line.replace('%mcreator%', (String) project.mcreatorconf.getProperty('mcreator'))
        }
        from file('LICENSE.txt')
    }
    into('Resources') {
        from file('platform/mac/' + appIcon) rename(appIcon, 'mcreatorapp.icns')
        from file('platform/mac/' + icon) rename(icon, 'mcreator.icns')
    }
    into('MacOS') {
        from file('platform/mac/mcreator_x64') rename('mcreator_x64', 'mcreator')
    }
    into('plugins') { from 'build/plugins/' }
    into('license') { from 'license' }
    into('lib') {
        from 'build/libs'
        from configurations.export
        from configurations.macX64
    }
    into('jdk.bundle') { from 'jdk/jdk17_mac_x64/' }

    doLast {
        // fix line endings where needed
        convertCRLF(file(exportPathX64 + '/Contents/Info.plistdos'), file(exportPathX64 + '/Contents/Info.plist'))
        delete exportPathX64 + '/Contents/Info.plistdos'

        // chmod needed on executable as mkisofs does not +x on Nix systems
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec { commandLine('chmod', '+x', exportPathX64 + '/Contents/MacOS/mcreator') }
        }

        // If we are on MacOS, we can also ad-hoc sign the executable
        if (Os.isFamily(Os.FAMILY_MAC)) {
            exec { commandLine('codesign', '--force', '--deep', '--sign', '-', exportPathX64) }
        }

        def dmgFile = 'build/export/MCreator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Mac 64bit.dmg'

        // Create x64 DMG
        ant.exec(executable: mkisofs_binary, failonerror: true) {
            arg(value: '-r')
            arg(value: '-D')
            arg(value: '-o')
            arg(value: dmgFile)
            arg(value: '-mac-name')
            arg(value: '-V')
            arg(value: 'MCreator ' + (String) project.mcreatorconf.getProperty('mcreator'))
            arg(value: '-apple')
            arg(value: '-v')
            arg(value: new File(buildDir, 'export/mac_x64'))
        }
    }
}

tasks.register('exportMacAarch64', Copy.class) {
    dependsOn downloadJDKMacAarch64
    dependsOn downloadMKISOFS
    dependsOn jar
    dependsOn exportPlugins

    def exportPathAarch64 = 'build/export/mac_aarch64/MCreator.app'

    def appIcon = project.snapshot ? "mcreatorapp_eap.icns" : "mcreatorapp.icns"
    def icon = project.snapshot ? "mcreator_eap.icns" : "mcreator.icns"

    into(exportPathAarch64 + '/Contents/')
    into('') {
        from file('platform/mac/Info.plist') rename('Info.plist', 'Info.plistdos') filter { line ->
            line.replace('%mcreator%', (String) project.mcreatorconf.getProperty('mcreator'))
        }
        from file('LICENSE.txt')
    }
    into('Resources') {
        from file('platform/mac/' + appIcon) rename(appIcon, 'mcreatorapp.icns')
        from file('platform/mac/' + icon) rename(icon, 'mcreator.icns')
    }
    into('MacOS') {
        from file('platform/mac/mcreator_aarch64') rename('mcreator_aarch64', 'mcreator')
    }
    into('plugins') { from 'build/plugins/' }
    into('license') { from 'license' }
    into('lib') {
        from 'build/libs'
        from configurations.export
        from configurations.macAarch64
    }
    into('jdk.bundle') { from 'jdk/jdk17_mac_aarch64/' }

    doLast {
        // fix line endings where needed
        convertCRLF(file(exportPathAarch64 + '/Contents/Info.plistdos'), file(exportPathAarch64 + '/Contents/Info.plist'))
        delete exportPathAarch64 + '/Contents/Info.plistdos'

        // chmod needed on executable as mkisofs does not +x on Nix systems
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec { commandLine('chmod', '+x', exportPathAarch64 + '/Contents/MacOS/mcreator') }
        }

        // If we are on MacOS, we can also ad-hoc sign the executable
        if (Os.isFamily(Os.FAMILY_MAC)) {
            exec { commandLine('codesign', '--force', '--deep', '--sign', '-', exportPathAarch64) }
        }

        def dmgFile = 'build/export/MCreator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Mac aarch64.dmg'

        // Create Aarch64 DMG
        ant.exec(executable: mkisofs_binary, failonerror: true) {
            arg(value: '-r')
            arg(value: '-D')
            arg(value: '-o')
            arg(value: dmgFile)
            arg(value: '-mac-name')
            arg(value: '-V')
            arg(value: 'MCreator ' + (String) project.mcreatorconf.getProperty('mcreator'))
            arg(value: '-apple')
            arg(value: '-v')
            arg(value: new File(buildDir, 'export/mac_aarch64'))
        }
    }
}

tasks.register('exportMac') {
    group 'export'

    dependsOn exportMacX64
    dependsOn exportMacAarch64

    doLast {
        delete 'build/export/mac_x64'
        delete 'build/export/mac_aarch64'
    }
}