import org.apache.tools.ant.taskdefs.condition.Os

launch4j {
    outfile = 'mcreator.exe'
    mainClassName = 'net.mcreator.Launcher'
    dontWrapJar = false
    copyConfigurable = []
    classpath = ["./lib/*"]
    jvmOptions = ["--add-opens=java.base/java.lang=ALL-UNNAMED"]
    libraryDir = "null"
    stayAlive = true

    bundledJrePath = 'jdk'
    requiresJdk = true
    requires64Bit = true

    errTitle = 'MCreator'
    supportUrl = 'https://mcreator.net/support'

    if (project.snapshot) {
        fileDescription = "MCreator " + (String) project.mcreatorconf.getProperty('mcreator')
        textVersion = (String) project.mcreatorconf.getProperty('mcreator')
    } else {
        fileDescription = "MCreator " + (String) project.mcreatorconf.getProperty('mcreator') + "." + project.builddate
        textVersion = (String) project.mcreatorconf.getProperty('mcreator') + "." + project.builddate
    }

    productName = "MCreator"
    companyName = "Pylo"
    copyright = "Pylo"

    icon = "${projectDir}/src/main/resources/net/mcreator/ui/res/" + (project.snapshot ? "icon_eap.ico" : "icon.ico")
}

tasks.register('exportWin64', Copy.class) {
    dependsOn downloadJDKWin64
    dependsOn createAllExecutables
    dependsOn jar
    dependsOn exportPlugins

    into 'build/export/win64'
    into('') {
        from file('LICENSE.txt')
        from file('build/launch4j/mcreator.exe')
    }
    into('lib') {
        from 'build/libs'
        from configurations.export exclude('mcreator.jar')
        from configurations.win64
    }
    into('plugins') { from 'build/plugins/' }
    into('license') { from 'license' }
    into('jdk') { from 'jdk/jdk21_win_64' }

    doLast {
        signFile(file('build/export/win64/mcreator.exe'))
    }
}

tasks.register('exportWindowsZip', Zip.class) {
    dependsOn exportWin64

    from 'build/export/win64/'
    into 'MCreator' + (String) project.mcreatorconf.getProperty('mcreator').replace(".", "").replace(" ", "")
    destinationDirectory = file('build/export/')
    archiveFileName = 'MCreator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Windows 64bit.zip'
}

tasks.register('buildInstallerWin64', Exec.class) {
    dependsOn downloadNSIS
    dependsOn exportWin64

    doFirst {
        copy {
            from file('platform/windows/installer/install.nsi') into 'build/export' rename('install.nsi', 'install64.nsi') filter { line ->
                line.replace('%year%', new Date().format('yyyy'))
                        .replace('%build%', project.builddate)
                        .replace('%mcreator%', (String) project.mcreatorconf.getProperty('mcreator'))
            }
        }
    }

    def nsis_binary
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        nsis_binary = new File(projectDir, '/build/tools/nsis/makensis')
    } else {
        nsis_binary = 'makensis'
    }
    commandLine nsis_binary, 'build/export/install64.nsi'

    doLast {
        delete 'build/export/install64.nsi'
        signFile(file('build/export/MCreator ' + (String) project.mcreatorconf.getProperty('mcreator') + ' Windows 64bit.exe'))
    }
}

tasks.register('exportWindows') {
    group 'export'

    dependsOn exportWindowsZip

    // Add installer only if this is not a snapshot build (and not MacOS that does not support makensis)
    if (!project.snapshot && !Os.isFamily(Os.FAMILY_MAC)) {
        dependsOn buildInstallerWin64
    }

    doLast {
        delete 'build/export/win64'
    }
}

void signFile(File fileToSign) {
    if (System.getenv('WIN_CERT_KEYSTORE') != null) {
        exec {
            commandLine 'java', '-jar', file('platform/windows/lib/jsign-6.0.jar'),
                    '--storetype', 'GOOGLECLOUD',
                    '--storepass', System.getenv('WIN_CERT_STOREPASS'),
                    '--keystore', System.getenv('WIN_CERT_KEYSTORE'),
                    '--alias', System.getenv('WIN_CERT_KEYNAME'),
                    '--certfile', 'codesign-chain.pem',
                    '--tsmode', 'RFC3161',
                    '--tsaurl', 'http://timestamp.globalsign.com/tsa/r6advanced1',
                    '--name', 'MCreator',
                    '--url', 'https://mcreator.net/',
                    fileToSign
        }
    }
}
